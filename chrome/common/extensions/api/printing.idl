// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Use the <code>chrome.printing</code> API to send print jobs to printers
// installed on Chromebook.
[platforms=("chromeos"),
implemented_in="chrome/browser/chromeos/extensions/printing/printing_api.h"]
namespace printing {
  // The source of the printer.
  enum PrinterSource {
    // Printer was added by user.
    USER,

    // Printer was added via policy.
    POLICY
  };

  // Description of the printer.
  dictionary Printer {
    // The printer's identifier; guaranteed to be unique among printers on the
    // device.
    DOMString id;

    // The name of the printer.
    DOMString name;

    // The human-readable description of the printer.
    DOMString description;

    // The printer URI. This can be used by extensions to choose the printer for
    // the user.
    DOMString uri;

    // The source of the printer (user or policy configured).
    PrinterSource source;

    // The flag which shows whether the printer fits
    // <a href="https://chromium.org/administrators/policy-list-3#DefaultPrinterSelection">
    // DefaultPrinterSelection</a> rules.
    // Note that several printers could be flagged.
    boolean isDefault;

    // The value showing how recent the printer was used for printing from
    // Chrome. The lower the value is the more recent the printer was used. The
    // minimum value is 0. Missing value indicates that the printer wasn't used
    // recently. This value is guaranteed to be unique amongst printers.
    long? recentlyUsedRank;
  };

  // The status of the printer.
  enum PrinterStatus {
    // The door of the printer is open. Printer still accepts print jobs.
    DOOR_OPEN,

    // The tray of the printer is missing. Printer still accepts print jobs.
    TRAY_MISSING,

    // The printer is out of ink. Printer still accepts print jobs.
    OUT_OF_INK,

    // The printer is out of paper. Printer still accepts print jobs.
    OUT_OF_PAPER,

    // The output area of the printer (e.g. tray) is full. Printer still accepts
    // print jobs.
    OUTPUT_FULL,

    // The printer has a paper jam. Printer still accepts print jobs.
    PAPER_JAM,

    // Some generic issue. Printer still accepts print jobs.
    GENERIC_ISSUE,

    // The printer is stopped and doesn't print but still accepts print jobs.
    STOPPED,

    // The printer is unreachable and doesn't accept print jobs.
    UNREACHABLE,

    // The printer is available.
    AVAILABLE
  };

  // Response for $(ref:getPrinterInfo) request.
  dictionary GetPrinterInfoResponse {
    // Printer capabilities in
    // <a href="https://developers.google.com/cloud-print/docs/cdd#cdd">
    // CDD format</a>.
    // The property may be missing.
    object? capabilities;

    // The status of the printer.
    PrinterStatus status;
  };

  // Status of the print job.
  enum JobStatus {
    // Print job is received on Chrome side but was not processed yet.
    PENDING,

    // Print job is sent for printing.
    IN_PROGRESS,

    // Print job was interrupted due to some error.
    FAILED,

    // Print job was canceled by the user or via API.
    CANCELED,

    // Print job was printed without any errors.
    PRINTED
  };

  callback GetPrintersCallback = void(Printer[] printers);
  callback GetPrinterInfoCallback = void(GetPrinterInfoResponse response);

  interface Functions {
    // Returns the list of available printers on the device. This includes
    // manually added, enterprise and discovered printers.
    static void getPrinters(GetPrintersCallback callback);

    // Returns the status and capabilities of the printer in
    // <a href="https://developers.google.com/cloud-print/docs/cdd#cdd">
    // CDD format</a>.
    // This call will fail with a runtime error if no printers with given id are
    // installed.
    static void getPrinterInfo(DOMString printerId,
                               GetPrinterInfoCallback callback);
  };

  interface Events {
    // Event fired when the status of the job is changed.
    // This is only fired for the jobs created by this extension.
    static void onJobStatusChanged(DOMString jobId, JobStatus status);
  };
};
