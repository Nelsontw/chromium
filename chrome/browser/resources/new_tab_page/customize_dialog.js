// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import 'chrome://resources/cr_elements/cr_button/cr_button.m.js';
import 'chrome://resources/cr_elements/cr_dialog/cr_dialog.m.js';
import 'chrome://resources/polymer/v3_0/iron-selector/iron-selector.js';
import './theme_icon.js';

import {html, PolymerElement} from 'chrome://resources/polymer/v3_0/polymer/polymer_bundled.min.js';

import {BrowserProxy} from './browser_proxy.js';

/**
 * @typedef {{
 *   id:number,
 *   label:string,
 *   frameColor:string,
 *   activeTabColor:string,
 * }}
 */
let ChromeTheme;

/**
 * @param {skia.mojom.SkColor} skColor
 * @return {string}
 */
function skColorToRgb(skColor) {
  const r = (skColor.value >> 16) & 0xff;
  const g = (skColor.value >> 8) & 0xff;
  const b = skColor.value & 0xff;
  return `rgb(${r}, ${g}, ${b})`;
}

/**
 * @param {string} hexColor
 * @return {skia.mojom.SkColor}
 */
function hexColorToSkColor(hexColor) {
  if (!/^#[0-9a-f]{6}$/.test(hexColor)) {
    return {value: 0};
  }
  const r = parseInt(hexColor.substring(1, 3), 16);
  const g = parseInt(hexColor.substring(3, 5), 16);
  const b = parseInt(hexColor.substring(5, 7), 16);
  return {value: 0xff000000 + (r << 16) + (g << 8) + b};
}

/**
 * Dialog that lets the user customize the NTP such as the background color or
 * image.
 * TODO(crbug.com/1032327): Display currently selected color on open.
 * TODO(crbug.com/1032327): Persist theme selection.
 * TODO(crbug.com/1032327): Add keyboard support.
 * TODO(crbug.com/1032328): Add support for selecting background image.
 * TODO(crbug.com/1032333): Add support for selecting shortcuts vs most visited.
 */
class CustomizeDialogElement extends PolymerElement {
  static get is() {
    return 'ntp-customize-dialog';
  }

  static get template() {
    return html`{__html_template__}`;
  }

  static get properties() {
    return {
      /** @private {!Array<!ChromeTheme>} */
      themes_: Array,
    };
  }

  constructor() {
    super();
    /** @private {newTabPage.mojom.PageHandlerRemote} */
    this.pageHandler_ = BrowserProxy.getInstance().handler;
  }

  /** @override */
  connectedCallback() {
    super.connectedCallback();
    this.pageHandler_.getChromeThemes().then(({themes}) => {
      this.themes_ =
          themes.map(theme => ({
                       id: theme.id,
                       label: theme.label,
                       frameColor: skColorToRgb(theme.frameColor),
                       activeTabColor: skColorToRgb(theme.activeTabColor),
                     }));
      this.$.dialog.showModal();
    });
  }

  /** @private */
  onCancelClick_() {
    this.$.dialog.cancel();
  }

  /** @private */
  onDoneClick_() {
    this.$.dialog.close();
  }

  /**
   * @param {!Event} e
   * @private
   */
  onCustomFrameColorChange_(e) {
    this.pageHandler_.applyAutogeneratedTheme(
        hexColorToSkColor(e.target.value));
  }

  /** @private */
  onAutogeneratedThemeClick_() {
    this.$.colorPicker.click();
  }

  /** @private */
  onDefaultThemeClick_() {
    this.pageHandler_.applyDefaultTheme();
  }

  /**
   * @param {!Event} e
   * @private
   */
  onChromeThemeClick_(e) {
    this.pageHandler_.applyChromeTheme(
        this.$.themes.itemForElement(e.target).id);
  }
}

customElements.define(CustomizeDialogElement.is, CustomizeDialogElement);
