// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module new_tab_page.mojom;

import "skia/public/mojom/skcolor.mojom";
import "url/mojom/url.mojom";

struct MostVisitedTile {
  string title;
  url.mojom.Url url;
};

struct MostVisitedInfo {
  bool custom_links_enabled;
  bool visible;
  array<MostVisitedTile> tiles;
};

// A predefined theme provided by Chrome. Created from data embedded in the
// Chrome binary.
struct ChromeTheme {
  // Theme identifier.
  uint32 id;
  // Localized string of the theme name.
  string label;
  // The theme's frame color.
  skia.mojom.SkColor frame_color;
  // The theme's active tab color.
  skia.mojom.SkColor active_tab_color;
};

// Used by the WebUI page to bootstrap bidirectional communication.
interface PageHandlerFactory {
  // The WebUI page's |BrowserProxy| singleton calls this method when the page
  // is first initialized.
  CreatePageHandler(pending_remote<Page> page,
                    pending_receiver<PageHandler> handler);
};

// Browser-side handler for requests from WebUI page.
interface PageHandler {
  // Adds tile.
  AddMostVisitedTile(url.mojom.Url url, string title) => (bool success);
  // Deletes tile by |url|.
  DeleteMostVisitedTile(url.mojom.Url url) => (bool success);
  // Moves tile identified by url to a new position at index |new_pos|.
  ReorderMostVisitedTile(url.mojom.Url url, uint8 new_pos);
  // Replaces the custom and most-visited tiles with the default tile set.
  RestoreMostVisitedDefaults();
  // Undoes the last action done to the tiles (add, delete, reorder, restore or
  // update). Note that only the last action can be undone.
  UndoMostVisitedTileAction();
  // Updates a tile by url.
  UpdateMostVisitedTile(url.mojom.Url url, url.mojom.Url new_url,
                        string new_title)
      => (bool success);
  // Returns the predefined Chrome themes.
  GetChromeThemes() => (array<ChromeTheme> themes);
  // Applies the default theme.
  ApplyDefaultTheme();
  // Applies autogenerated theme for the given color.
  ApplyAutogeneratedTheme(skia.mojom.SkColor frame_color);
  // Applies the predefined Chrome theme with the given ID.
  ApplyChromeTheme(uint32 id);
};

// WebUI-side handler for requests from the browser.
interface Page {
  // Updates the page with most-visited info which includes whether the
  // tiles should be shown, if links can be customized and the tiles.
  SetMostVisitedInfo(MostVisitedInfo info);
  // Set custom links enabled separate from |SetMostVisitedInfo|.
  SetCustomLinksEnabled(bool enabled);
  // Set whether most-visited section should be shown.
  SetMostVisitedVisible(bool visible);
};
