// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module content.mojom;

import "ui/accessibility/mojom/ax_action_data.mojom";
import "ui/accessibility/mojom/ax_relative_bounds.mojom";

struct LocationChanges {
  // ID of the object whose location is changing.
  int32 id;

  // The object's new location info.
  ax.mojom.AXRelativeBounds new_location;
};

// Interface for accessibility messages sent from the renderer to the browser,
// implemented by RenderFrameHostImpl in the browser process.
interface RenderAccessibilityHost {
  // Sent to update the browser of the location of accessibility objects.
  HandleAXLocationChanges(array<LocationChanges> changes);
};

// Interface for accessibility messages sent from RenderFrameHostImpl in the
// browser process, implemented by the RenderAccessibilityManager object in the
// renderer process. This RenderAccessibilityManager object will be owned by the
// RenderFrameImpl object, which will keep it alive during its entire lifetime.
//
// This interface is used via an associated channel from RenderFrameHostImpl in
// the browser process, shared with other interfaces that accessibility-related
// messages need to maintain the order with like NavigationClient or LocalFrame.
interface RenderAccessibility {
  // Change the accessibility mode in the renderer process for a given frame to
  // match the one set for such frame from the browser process. |ax_mode| should
  // contain at least the ui::AXMode::kWebContents value to enable accessibility
  // support for web contents. See ui/accessibility/ax_mode.h for valid values.
  SetMode(uint32 ax_mode);

  // Kills the renderer. Sent when there is a fatal error in the accessibility
  // tree and the maximum number of resets has been hit.
  FatalError();

  // Relay a request from assistive technology to perform an action, such as
  // focusing or clicking on a node.
  PerformAction(ax.mojom.AXActionData action_data);

  // Tell the renderer to reset and send a new accessibility tree from scratch
  // because the browser is out of sync. It passes a sequential reset token.
  // This should be rare, and if we need to reset the same renderer too many
  // times we just kill it. After sending a reset, the browser ignores incoming
  // accessibility IPCs until it receives one with the matching reset token.
  // Conversely, it ignores IPCs with a reset token if it was not expecting a
  // reset.
  Reset(int32 reset_token);
};
